---

- name: "PRELIM | Get Display Version value."
  ansible.windows.win_reg_stat:
      path: HKLM:\Software\Microsoft\Windows NT\CurrentVersion
      name: DisplayVersion
  changed_when: false
  failed_when: false
  register: win10cis_displayversion
  tags:
      - always

- name: "PRELIM | Get OS Build value."
  ansible.windows.win_reg_stat:
      path: HKLM:\Software\Microsoft\Windows NT\CurrentVersion
      name: CurrentBuild
  changed_when: false
  failed_when: false
  register: win10cis_currentbuild
  tags:
      - always

- name: "PRELIM | Detect if Trusted Platform Module (TPM) is Available"
  ansible.windows.win_shell: (Get-CimInstance -ClassName Win32_OperatingSystem).ProductType
  changed_when: false
  failed_when: false
  register: win10cis_tpm_enabled
  tags:
      - always

# HVM is Amazon AMI's, Hyper-V is Azure's, KVM is used for ('QEMU', 'Amazon EC2', 'DigitalOcean', 'Google', 'Scaleway', 'Nutanix', 'KVM', 'KVM Server', 'Bochs', 'AHV')
# Current list is elastic and will be updated as we test more cloud based services.
# Current testing is working in Azure using Hyper-V. We are currently using this for reference:
# https://github.com/ansible/ansible/blob/905131fc76a07cf89dbc8d33e7a4910da3f10a16/lib/ansible/module_utils/facts/virtual/linux.py#L205
- name: PRELIM | Set Fact If Cloud Based System.
  ansible.builtin.set_fact:
      win10cis_cloud_based_system: true
  when:
      - ansible_virtualization_type == 'Hyper-V' or
        ansible_virtualization_type == 'hvm' or
        ansible_virtualization_type == 'kvm'
  tags:
      - always

- name: PRELIM | Check Hyper-V Installation
  ansible.windows.win_shell: Get-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-All | Select-Object -Property State | ft -hide
  changed_when: false
  failed_when: false
  register: win10cis_hyper_v_installed

- name: PRELIM | Get Windows installation type
  ansible.windows.win_reg_stat:
      path: HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion
      name: InstallationType
  register: get_windows_installation_type
  tags:
      - always

- name: PRELIM | Set Windows installation type
  ansible.builtin.set_fact:
      win10cis_windows_installation_type: "{{ get_windows_installation_type.value | default('') }}"
  tags:
      - always

- name: PRELIM | Obtatin And Load Default Hive As Well As User Hives
  block:
      - name: PRELIM | Load Default User Hive (Account That All New Users Get Created From Profile)
        ansible.windows.win_shell: REG LOAD HKU\DEFAULT C:\Users\Default\NTUSER.DAT
        changed_when: false
        failed_when: false

      - name: PRELIM | Pull All Username and SIDs
        ansible.windows.win_shell: Get-CimInstance -Class Win32_UserAccount -Filter "SID LIKE 'S-1-5-%'" | ForEach-Object { $_.Name + " " + $_.SID }
        changed_when: false
        failed_when: false
        register: all_users

      - name: PRELIM | Create Results List Fact For Username And SIDs
        ansible.builtin.set_fact:
            username_and_sid_results_list: "{{ all_users.stdout_lines | map('split', ' ') | list }}"

      - name: PRELIM | Load All User Hives From Username And SIDs List
        ansible.windows.win_shell: REG LOAD HKU\{{ item.1 }} C:\Users\{{ item.0 }}\NTUSER.DAT
        changed_when: false
        failed_when: false
        loop: "{{ username_and_sid_results_list }}"

      - name: PRELIM | Retrieve Current Users SIDs from HKEY_USERS
        ansible.windows.win_shell: (Get-ChildItem "REGISTRY::HKEY_USERS").name | Where-Object {$_ -notlike "*_classes"}
        changed_when: false
        failed_when: false
        register: current_users_loaded_hku

      - name: PRELIM | Create List Fact For Current Users SIDs from HKEY_USERS
        ansible.builtin.set_fact:
            hku_loaded_list: "{{ current_users_loaded_hku.stdout | regex_replace('HKEY_USERS\\\\','') | split }}"
  when: win10cis_section19
  tags:
      - always
